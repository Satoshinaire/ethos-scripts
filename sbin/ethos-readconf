#!/bin/bash
# LICENSE AGREEMENT
#
# Version 1.2 (c) 2016-2017 Dale Chapman, sling00@gmail.com (“Author”).
#
# By using this file, you agree to the following:
#
# This file has been licensed to gpuShack for the exclusive use and distribution as part of ethOS. All other previous licenses
# of this file have been revoked. This license does not expire and allows for any modification, distribution, and/or derivative work
# by gpuShack and by the Author. This license extends to gpuShack’s owners, operators, officers, and contractors, where
# applicable.
#
# The Author expressly forbids and revokes usage of this file, as well as any previous iterations of this file, in any
# operating system other than ethOS. Any fork of ethOS, third party or otherwise, may not use this file without express written
# permission from the Author.
#
# Personal Use
#
# End users may modify and use this script for personal use, but may not redistribute or include in a larger work, in whole, or
# in part, without express written permission from the Author.

CONF=/home/ethos/local.conf

DRIVER=$(xargs </run/initramfs/driver.conf)
if [ -z "$DRIVER" ]; then
	DRIVER="fglrx"
fi

f.whichminer(){
	MINER=$(grep -m 1 -Poi "(?<=^miner\s$HOSTNAME)\s+(.*)" "$CONF" | xargs)
	if [ -z "$MINER" ];then
		MINER=$(grep -m 1 -Poi "(?<=^globalminer)\s+(.*)" "$CONF" | xargs)
	fi
	if [ -z "$MINER" ];then
		MINER="ethminer"
	fi
	case "$MINER" in
		asic )
			MINER="cgminer-avalon7"
			MINER2="$MINER"
		;;
		ccminer )
			MINER="ccminer"
			MINER2="$MINER"
		;;
		cgminer-skein )
			MINER="cgminer-skein"
			MINER2="$MINER"
		;;
		claymore )
			MINER="claymore"
			MINER2="$MINER"
		;;
		claymore-xmr )
			MINER="claymore-xmr"
			MINER2="$MINER"
		;;
		claymore-zcash )
			MINER="claymore-zcash"
			MINER2="$MINER"
		;;
		dstm-zcash )
			MINER="dstm-zcash"
			MINER2="$MINER"
		;;
		ethminer )
			MINER="ethminer"
			MINER2="$MINER"
		;;
		ewbf-zcash )
			MINER="ewbf-zcash"
			MINER2="$MINER"
		;;
		optiminer-zcash )
			MINER="optiminer-zcash"
			MINER2="$MINER"
		;;
		sgminer-gm )
			MINER="sgminer-gm"
			MINER2="$MINER"
		;;
		sgminer-gm-xmr )
			MINER="sgminer-gm-xmr"
			MINER2="$MINER"
		;;
		wolf-xmr-cpu )
			MINER="wolf-xmr-cpu"
			MINER2="$MINER"
		;;
		zcash-miner )
			MINER="silentarmy"
			MINER2="zcash-miner"
		;;
		* )
			MINER="ethminer"
			MINER2="$MINER"
		;;
	esac
}

#Main functions below
case "$1" in
	autoreboot )
		VALUE=$(grep -m 1 -Poi "(?<=^autoreboot)\s+(\d+)" "$CONF" | xargs)
		echo "$VALUE"
	;;
	autorebootmode )
		VALUE=$(grep -m 1 -Poi "(?<=^autorebootmode)\s+(\w)" "$CONF" | xargs)
		if [ -z "$VALUE" ]; then
			VALUE="0"
		fi
		echo "$VALUE"
	;;
	custompanel )
		VALUE=$(grep -m 1 -Poi "(?<=^custompanel)\s+(.*)" "$CONF" | xargs)
	 		echo "$VALUE"
	;;
	driver )
		echo "$DRIVER"
	;;
	driverless )
		DRIVERLESS=$(grep -m 1 -Poi "(?<=^driverless.$HOSTNAME)\s+(.*)" "$CONF" | sed -e 's/ //g' | xargs)
		echo "$DRIVERLESS"
	;;
	dualminer )
		DATA=$(grep -m 1 -Poi "(?<=dualminer.$HOSTNAME)\s+(.*)" "$CONF" |xargs)
		if [ -z "$DATA" ]; then
			DATA=$(grep -m 1 -Poi '\s*(?<=^dualminer)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$DATA"
	;;
	dualminer-coin )
		DATA=$(grep -m 1 -Poi "(?<=dualminer-coin.$HOSTNAME)\s+(.*)" "$CONF" |xargs)
		if [ -z "$DATA" ]; then
			DATA=$(grep -m 1 -Poi '\s*(?<=^dualminer-coin)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$DATA"
	;;
	dualminer-pool )
		DATA=$(grep -m 1 -Poi "(?<=dualminer-pool.$HOSTNAME)\s+(.*)" "$CONF" |xargs)
		if [ -z "$DATA" ]; then
			DATA=$(grep -m 1 -Poi '\s*(?<=^dualminer-pool)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$DATA"
	;;
	dualminer-wallet )
		DATA=$(grep -m 1 -Poi "(?<=dualminer-wallet.$HOSTNAME)\s+(.*)" "$CONF" |xargs)
		if [ -z "$DATA" ]; then
			DATA=$(grep -m 1 -Poi '\s*(?<=^dualminer-wallet)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$DATA"
	;;
	externalapi )
		DATA=$(grep -m 1 -Poi "(?<=externalapi)\s+(.*)" "$CONF" | xargs)
		echo "$DATA"
	;;
	flags | rigflags )
		f.whichminer
		FLAGS=$(grep -m 1 -Poi "\s*(?<=^$MINER2\=flg.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$FLAGS" ]; then
			FLAGS=$(grep -m 1 -Poi "\s*(?<=^flg.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$FLAGS" ]; then
			FLAGS=$(grep -m 1 -Poi "\s*(?<=^$MINER2\=flags)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$FLAGS" ]; then
			FLAGS=$(grep -m 1 -Poi '\s*(?<=^flags)\s+(.*)' "$CONF" | xargs)
		fi
		if [ "$MINER" != "ethminer" ]; then
			 FLAGS=$(echo "$FLAGS" | egrep -v "farm-recheck|cl-local-work|cl-global-work" | xargs)
		fi
		echo "$FLAGS"
	;;
	fullpool )
		FULLPOOL=$(grep -m 1 -Poi '\s*(?<=^pool)\s+(.*)' "$CONF" | xargs)
		echo "$FULLPOOL"
	;;
	gpumode )
		GPUMODE=$(grep -m 1 -Poi "(?<=^gpumode.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		echo "$GPUMODE"
	;;
	guienabled )
		if [ "$DRIVER" = "amdgpu" ]; then
			GUIENABLED=$(grep -m 1 -Poi "(?<=^desktop.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
			if [ -z "$GUIENABLED" ]; then
				GUIENABLED=$(grep -m 1 -Poi "(?<=^globaldesktop)\s+(.*)" "$CONF" | xargs)
			fi
			echo "$GUIENABLED"
		fi
	;;
	loc )
		LOC=$(grep -m 1 -Poi "(?<=^loc.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		echo "$LOC"
	;;
	lockscreen )
		LOCK=$(grep -m 1 -Poi '(?<=^lockscreen)\s+(.*)' "$CONF" | xargs)
		echo "$LOCK"
	;;
	maxtemp | globalmaxtemp )
		MAXGPUTEMP=$(grep -m 1 -Poi "\s*(?<=^mxt.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$MAXGPUTEMP" ]; then
			MAXGPUTEMP=$(grep -m 1 -Poi '\s*(?<=^maxgputemp)\s+(.*)' "$CONF" | xargs)
		fi
		if [ -z "$MAXGPUTEMP" ]; then
			MAXGPUTEMP="85"
		fi
		echo "$MAXGPUTEMP"
	;;
	miner )
		f.whichminer
		echo "$MINER"
	;;
	off )
		OFF=$(grep -cPo "(?<=^off.$HOSTNAME)" "$CONF" | xargs)
		if [ "$OFF" -gt "0" ]; then
			echo "1"
		else
			echo "0"
		fi
	;;
	persistentlogs )
		DATA=$(grep -m 1 -Poi '(?<=^persistentlogs\s)(.*)' "$CONF" | xargs)
		echo "$DATA"
	;;
	pid )
		f.whichminer
		case "$MINER" in
			ethminer )
				GPUNUM="$2"
				if [ -z "$GPUNUM" ]; then
					GPUNUM="0"
				fi
				if [ "$DRIVER" = "amdgpu" -o "$DRIVER" = "fglrx" ];then
					PID=$(ps aux | grep ethminer-amd | tr -s "[:space:]" | grep -w "\-\-opencl\-devices $GPUNUM" | grep -m 1 -Poi "(?<=ethos.)(\d+)" | xargs)
				elif [ "$DRIVER" = "nvidia" ]; then
					PID=$(ps aux | grep "$MINER" | tr -s "[:space:]" | grep -w "\-\-cuda\-devices $GPUNUM" | grep -m 1 -Poi "(?<=ethos.)(\d+)" | xargs)
				fi
			;;
			ccminer | cgminer-skein | claymore | claymore-xmr | claymore-zcash | dstm-zcash | ewbf-zcash | sgminer-gm | optiminer-zcash )
				PID=$(ps aux | grep -v grep | grep -v screen | grep "$MINER" | tr -s "[:space:]" | grep -m 1 -Poi "(?<=ethos.)(\d+)" | xargs)
			;;
			sgminer-gm-xmr )
				PID=$(ps aux | grep -v grep | grep -v screen | grep sgminer | tr -s "[:space:]" | grep -m 1 -Poi "(?<=ethos.)(\d+)" | xargs)
			;;
			silentarmy )
				PID=$(ps aux | grep "$MINER" | grep -v grep | grep -v screen | tr -s "[:space:]" | grep -m 1 -Poi "(?<=ethos.)(\d+)" | xargs)
			;;
		esac
		echo "$PID"
	;;
	pool )
		POOL=$(grep -m 1 -Poi '(?<=^pool)\s+(.*)' "$CONF" | cut -d "/" -f 3 | xargs)
		echo "$POOL"
	;;
	poolemail )		
		DATA=$(grep -m 1 -Poi '(?<=^poolemail.$HOSTNAME)\s+(.*)' "$CONF" | xargs )		
		if [ -z "$DATA" ];then		
			DATA=$(grep -m 1 -Poi '(?<=^poolemail)\s+(.*)' "$CONF" | xargs )		
		fi		
               	echo "$DATA"		
	;;
	poolpass1 )
		f.whichminer
		POOLPASS=$(grep -m 1 -Poi "(?<=^rigpoolpass1.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi "(?<=^$MINER2\=poolpass1)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi '(?<=^poolpass1)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$POOLPASS"
	;;
	poolpass2 )
		f.whichminer
		POOLPASS=$(grep -m 1 -Poi "(?<=^rigpoolpass2.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi "(?<=^$MINER2\=poolpass2)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi '(?<=^poolpass2)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$POOLPASS"
	;;
	poolpass3 )
		f.whichminer
		POOLPASS=$(grep -m 1 -Poi "(?<=^rigpoolpass3.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi "(?<=^$MINER2\=poolpass3)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi '(?<=^poolpass3)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$POOLPASS"
	;;
	poolpass4 )
		f.whichminer
		POOLPASS=$(grep -m 1 -Poi "(?<=^rigpoolpass4.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi "(?<=^$MINER2\=poolpass4)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$POOLPASS" ]; then
			POOLPASS=$(grep -m 1 -Poi '(?<=^poolpass4)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$POOLPASS"
	;;
	proxypool1 )
		f.whichminer
		PROXYPOOL1=$(grep -m 1 -Poi "(?<=^rigpool1.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$PROXYPOOL1" ]; then
			PROXYPOOL1=$(grep -m 1 -Poi "(?<=^$MINER2\=proxypool1)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$PROXYPOOL1" ]; then
			PROXYPOOL1=$(grep -m 1 -Poi '(?<=^proxypool1)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$PROXYPOOL1"
	;;
	proxypool2 )
		f.whichminer
		PROXYPOOL2=$(grep -m 1 -Poi "(?<=^rigpool2.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$PROXYPOOL2" ]; then
			PROXYPOOL2=$(grep -m 1 -Poi "(?<=^$MINER2\=proxypool2)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$PROXYPOOL2" ]; then
			PROXYPOOL2=$(grep -m 1 -Poi '(?<=^proxypool2)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$PROXYPOOL2"
	;;
	proxypool3 )
		f.whichminer
		PROXYPOOL3=$(grep -m 1 -Poi "(?<=^rigpool3.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$PROXYPOOL3" ]; then
			PROXYPOOL3=$(grep -m 1 -Poi "(?<=^$MINER2\=proxypool3\s)(.*)" "$CONF" | xargs)
		fi
		if [ -z "$PROXYPOOL3" ]; then
			PROXYPOOL3=$(grep -m 1 -Poi '(?<=^proxypool3\s)(.*)' "$CONF" | xargs)
		fi
		echo "$PROXYPOOL3"
	;;
	proxypool4 )
		f.whichminer
		PROXYPOOL4=$(grep -m 1 -Poi "(?<=^rigpool4.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$PROXYPOOL4" ]; then
			PROXYPOOL4=$(grep -m 1 -Poi "(?<=^$MINER2\=proxypool4)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$PROXYPOOL4" ]; then
			PROXYPOOL4=$(grep -m 1 -Poi '(?<=^proxypool4)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$PROXYPOOL4"
	;;
	proxywallet )
		f.whichminer
		STRATUMWALLET=$(grep -m 1 -Poi "(?<=wallet.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$STRATUMWALLET" ];then
			STRATUMWALLET=$(grep -m 1 -Poi "(?<=^$MINER2\=proxywallet)\s+(.*)" "$CONF" | xargs)
		fi
		if [ -z "$STRATUMWALLET" ];then
			STRATUMWALLET=$(grep -m 1 -Poi '(?<=^proxywallet)\s+(.*)' "$CONF" | xargs)
		fi
		echo "$STRATUMWALLET"
	;;
	reboots )
		REBOOTS=$(grep -m 1 -Poi "(?<=^reb.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		echo "$REBOOTS"
	;;
	selectedgpus )
		SELECTEDGPUS=$(grep -m 1 -Poi "(?<=^sel.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		echo "$SELECTEDGPUS"
	;;
	stratumenabled )
		STRATUMENABLED=$(grep -m 1 -Poi "(?<=^stratumproxy)\s+(.*)" "$CONF"|xargs)
		echo "$STRATUMENABLED"
	;;
	worker )
		WORKER=$(grep -m 1 -Poi "(?<=^loc.$HOSTNAME)\s+(.*)" "$CONF" | xargs)
		if [ -z "$WORKER" ];then
			WORKER=$(xargs </etc/hostname)
		fi
		echo "$WORKER"
	;;
	validminers )
		case "$DRIVER" in
			amdgpu | fglrx )
				VALIDMINERS="claymore claymore-xmr claymore-zcash cgminer-skein ethminer optiminer-zcash silentarmy sgminer-gm sgminer-gm-xmr zcash-miner"
			;;
			nvidia )
				VALIDMINERS="ccminer claymore dstm-zcash ewbf-zcash ethminer"
			;;
			cpu )
				VALIDMINERS="wolf-xmr-cpu"
			;;
		esac
		echo "$VALIDMINERS"
	;;
	* )
		echo ""
		echo "USAGE"
		echo "====================================================================="
		echo "driver		currently used gpu driver"
		echo "driverless	driverless option set for next boot"
		echo "fullpool	full pool url"
		echo "flags		miner configuration flags"
		echo "loc		location/rack/customworker"
		echo "lockscreen	auto lock option set"
		echo "pool		pool data"
		echo "reboots		number of issued reboots via server reb string"
		echo "pid <gpu>	processid of <gpu>'s miner"
		echo "maxtemp		gpu overheat temperature threshold"
		echo "selectedgpus	gpus selected for mining"
		echo "stratumenabled	use local stratum proxy"
		echo "proxypool[1-4]	proxypool[1-4] details"
		echo "poolpass[1-4]	poolpass[1-4] details"
		echo "proxywallet	stratum proxy wallet address"
		echo "worker		worker id which is sent to the pool"
		echo "autoreboot	number of autoreboots before rig stops autorebooting"
		echo "custompanel	12-digit farm id to replace randomly generated id"
		echo "off		miner turned off"
		echo "miner		currently used miner"
		echo "gpumode		gpu mode, a type of miner flag"
		echo "======================================================================"
	 	exit 1
	;;
esac
